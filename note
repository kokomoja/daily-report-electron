// main.js
const { app, BrowserWindow, ipcMain } = require("electron");
const path = require("path");
const sql = require("mssql");
const XLSX = require("xlsx");
const PDFDocument = require("pdfkit");
const fs = require("fs");

// Config SQL Server
const config = {
  server: "192.168.99.253",
  database: "opDb",
  user: "sa",
  password: "@1234",
  options: {
    encrypt: false,
    trustServerCertificate: true,
    instanceName: "sqlexpress",
  },
};

app.commandLine.appendSwitch("disable-gpu-shader-disk-cache");

let mainWindow;

function createWindow(file) {
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 700,
    webPreferences: {
      preload: path.join(__dirname, "preload.js"),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });
  mainWindow.loadFile(path.join(__dirname, file));
}

app.on("ready", () => {
  createWindow("login.html"); // ✅ เริ่มที่หน้า login
});

function toLocalDateTime(dateStr) {
  if (!dateStr) return null;
  const d = new Date(dateStr);
  d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
  return d;
}

function formatDateUTC(dateValue) {
  if (!dateValue) return "";
  const d = new Date(dateValue);
  const yyyy = d.getUTCFullYear();
  const mm = String(d.getUTCMonth() + 1).padStart(2, "0");
  const dd = String(d.getUTCDate()).padStart(2, "0");
  return `${yyyy}-${mm}-${dd}`;
}

function formatDateTimeUTC(dateValue) {
  if (!dateValue) return "";
  const d = new Date(dateValue);
  const yyyy = d.getUTCFullYear();
  const mm = String(d.getUTCMonth() + 1).padStart(2, "0");
  const dd = String(d.getUTCDate()).padStart(2, "0");
  const hh = String(d.getUTCHours()).padStart(2, "0");
  const min = String(d.getUTCMinutes()).padStart(2, "0");
  return `${yyyy}-${mm}-${dd} ${hh}:${min}`;
}

function formatHourMinute(totalMinutes) {
  if (totalMinutes == null) return "";
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}`;
}

function getFontPath(fontFile) {
  if (fs.existsSync(path.join(__dirname, "fonts", fontFile))) {
    return path.join(__dirname, "fonts", fontFile); // dev mode
  }
  return path.join(process.resourcesPath, "fonts", fontFile); // build exe
}

// ====================== HANDLERS ======================
ipcMain.handle("login-check", async (event, data) => {
  try {
    const pool = await sql.connect(config);
    const result = await pool
      .request()
      .input("user", sql.VarChar(50), data.user)
      .input("pass", sql.VarChar(50), data.pass)
      .query(
        "SELECT login_user, username FROM loginID WHERE login_user=@user AND login_password=@pass"
      );

    if (result.recordset.length > 0) {
      const user = result.recordset[0];
      return {
        success: true,
        message: "เข้าสู่ระบบสำเร็จ",
        login_user: user.login_user,
        username: user.username,
      };
    } else {
      return { success: false, message: "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง" };
    }
  } catch (err) {
    return { success: false, error: err.message };
  }
});

ipcMain.handle("add-user", async (event, data) => {
  try {
    // ✅ ตรวจสอบรหัสลับก่อน
    if (data.secret !== "0845535000721") {
      return { success: false, message: "❌ รหัสลับไม่ถูกต้อง" };
    }

    const pool = await sql.connect(config);
    await pool
      .request()
      .input("login_user", sql.VarChar(50), data.login_user)
      .input("login_password", sql.VarChar(50), data.login_password)
      .input("username", sql.VarChar(50), data.username).query(`
    INSERT INTO loginID (login_user, login_password, username)
    VALUES (@login_user, @login_password, @username)
  `);

    return { success: true, message: "✅ เพิ่มผู้ใช้งานสำเร็จ" };
  } catch (err) {
    console.error("add-user error:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("get-lists", async () => {
  try {
    let pool = await sql.connect(config);
    const machines = await pool
      .request()
      .query("SELECT machine FROM machineNumber");
    const operators = await pool
      .request()
      .query("SELECT op_name FROM operatorName");
    return {
      machines: machines.recordset.map((m) => m.machine),
      operators: operators.recordset.map((o) => o.op_name),
    };
  } catch (err) {
    console.error("get-lists error:", err);
    return { error: err.message };
  }
});

ipcMain.handle("get-opre-list", async () => {
  try {
    let pool = await sql.connect(config);
    const result = await pool.request().query(`
      SELECT opre_id, opre_show
      FROM dailyReportRevision
      ORDER BY opre_id DESC
    `);
    return result.recordset;
  } catch (err) {
    console.error("get-opre-list error:", err);
    return { error: err.message };
  }
});

ipcMain.handle("insert-report", async (event, data) => {
  try {
    let pool = await sql.connect(config);
    await pool
      .request()
      .input("op_date", sql.Date, data.op_date)
      .input("machine", sql.VarChar(50), data.machine)
      .input("operator", sql.VarChar(50), data.operator)
      .input("job", sql.VarChar(100), data.job)
      .input("start_time", sql.DateTime, toLocalDateTime(data.start_time))
      .input("stop_time", sql.DateTime, toLocalDateTime(data.stop_time))
      .input("recorder_name", sql.VarChar(50), data.recorder_name)
      .input("opre_id", sql.Int, data.opre_id || null) // ✅ เพิ่ม opre_id
      .query(`
        INSERT INTO dailyReport
        (op_date, machine, operator, job, start_time, stop_time,
         op_hour, recorder_name, time_stamp, opre_id)
        VALUES (@op_date, @machine, @operator, @job, @start_time, @stop_time,
          DATEDIFF(MINUTE, @start_time, @stop_time), @recorder_name, GETDATE(), @opre_id)
      `);

    return { success: true, message: "บันทึกเรียบร้อย" };
  } catch (err) {
    console.error("insert error:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("update-report", async (event, data) => {
  try {
    let pool = await sql.connect(config);
    await pool
      .request()
      .input("op_id", sql.Int, data.op_id)
      .input("op_date", sql.Date, data.op_date)
      .input("machine", sql.VarChar(50), data.machine)
      .input("operator", sql.VarChar(50), data.operator)
      .input("job", sql.VarChar(100), data.job)
      .input("start_time", sql.DateTime, toLocalDateTime(data.start_time))
      .input("stop_time", sql.DateTime, toLocalDateTime(data.stop_time))
      .input("recorder_name", sql.VarChar(50), data.recorder_name)
      .input("opre_id", sql.Int, data.opre_id || null) // ✅ เพิ่ม opre_id
      .query(`
        UPDATE dailyReport
        SET op_date=@op_date,
            machine=@machine,
            operator=@operator,
            job=@job,
            start_time=@start_time,
            stop_time=@stop_time,
            op_hour = DATEDIFF(MINUTE, @start_time, @stop_time),
            recorder_name=@recorder_name,
            time_stamp=GETDATE(),
            opre_id=@opre_id
        WHERE op_id=@op_id
      `);

    return { success: true, message: "อัพเดทเรียบร้อย" };
  } catch (err) {
    console.error("update error:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("get-reports", async (event, date) => {
  try {
    let pool = await sql.connect(config);
    let query = `
  SELECT d.op_id, d.op_date, d.machine, d.operator, d.job,
         d.start_time, d.stop_time,
         d.op_hour, d.time_stamp, d.recorder_name,
         d.opre_id,
         r.opre_code,     -- ✅ เพิ่ม
         r.opre_rev,      -- ✅ เพิ่ม
         r.opre_eff,      -- ✅ เพิ่ม
         r.opre_show
  FROM dailyReport d
  LEFT JOIN dailyReportRevision r ON d.opre_id = r.opre_id
`;

    let request = pool.request();
    if (date) {
      query += " WHERE CAST(d.op_date AS DATE) = @date";
      request = request.input("date", sql.Date, date);
    }
    query += " ORDER BY d.op_date DESC";

    let result = await request.query(query);
    return result.recordset;
  } catch (err) {
    console.error("get-reports error:", err);
    return { error: err.message };
  }
});

ipcMain.handle("insert-opre", async (event, data) => {
  try {
    let pool = await sql.connect(config);

    // ✅ ประกอบค่า opre_show (เช่น CODE/REV/2025-09-20)
    const opre_show = `${data.opre_code}/${data.opre_rev}/${data.opre_eff}`;

    await pool
      .request()
      .input("opre_code", sql.VarChar(50), data.opre_code)
      .input("opre_rev", sql.VarChar(50), data.opre_rev)
      .input("opre_eff", sql.Date, data.opre_eff)
      .input("opre_show", sql.VarChar(50), opre_show)
      .input("opre_id", sql.Int, data.opre_id).query(`
        INSERT INTO dailyReportRevision (opre_code, opre_rev, opre_eff, opre_show)
        VALUES (@opre_code, @opre_rev, @opre_eff, @opre_show)
      `);

    return { success: true, message: "บันทึกข้อมูล OPRE สำเร็จ" };
  } catch (err) {
    console.error("insert-opre error:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("delete-multiple", async (event, ids) => {
  try {
    if (!ids || ids.length === 0) {
      return { success: false, error: "ไม่ได้เลือกข้อมูลที่จะลบ" };
    }
    let pool = await sql.connect(config);
    await pool
      .request()
      .query(`DELETE FROM dailyReport WHERE op_id IN (${ids.join(",")})`);
    return { success: true, message: "ลบข้อมูลเรียบร้อย" };
  } catch (err) {
    console.error("delete-multiple error:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("export-excel", async (event, date) => {
  try {
    let pool = await sql.connect(config);
    let query = "SELECT * FROM dailyReport";
    let request = pool.request();
    if (date) {
      query += " WHERE CAST(op_date AS DATE) = @date";
      request = request.input("date", sql.Date, date);
    }
    let result = await request.query(query);
    const reports = result.recordset;

    if (!reports || reports.length === 0) {
      return { success: false, error: "ไม่มีข้อมูล" };
    }

    const data = reports.map((r) => ({
      ลำดับ: r.op_id,
      วันที่: formatDateUTC(r.op_date),
      เครื่องจักร: r.machine,
      พนักงาน: r.operator,
      งาน: r.job,
      เริ่มต้น: formatDateTimeUTC(r.start_time),
      สิ้นสุด: formatDateTimeUTC(r.stop_time),
      เวลาทำงาน: formatHourMinute(r.op_hour),
    }));

    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Reports");

    const exportPath = path.join(
      app.getPath("documents"),
      `daily_report_${Date.now()}.xlsx`
    );
    XLSX.writeFile(wb, exportPath);

    return { success: true, message: "Export สำเร็จ", path: exportPath };
  } catch (err) {
    console.error("export-excel error:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("export-pdf", async (event, date) => {
  try {
    let pool = await sql.connect(config);
    let query = `
      SELECT d.op_id, d.op_date, d.machine, d.operator, d.job,
             d.start_time, d.stop_time, d.op_hour, d.time_stamp, d.recorder_name,
             d.opre_id,
             r.opre_show   -- ✅ ดึงค่า revision
      FROM dailyReport d
      LEFT JOIN dailyReportRevision r ON d.opre_id = r.opre_id
    `;

    let request = pool.request();
    if (date) {
      query += " WHERE CAST(d.op_date AS DATE) = @date";
      request = request.input("date", sql.Date, date);
    }
    query += " ORDER BY d.op_date DESC";

    let result = await request.query(query);

    const reports = result.recordset;

    if (!reports || reports.length === 0) {
      return { success: false, error: "ไม่มีข้อมูล" };
    }
    console.log("PDF data:", reports[0]);

    // สร้าง PDF
    const exportPath = path.join(
      app.getPath("documents"),
      `daily_report_${Date.now()}.pdf`
    );
    const doc = new PDFDocument({
      margin: 30,
      size: "A4",
      layout: "landscape",
    });

    doc.pipe(fs.createWriteStream(exportPath));

    doc.registerFont(
      "THSarabunNew",
      path.join(__dirname, "fonts", "THSarabunNew.ttf")
    );

    doc.registerFont(
      "THSarabunNewBold",
      path.join(__dirname, "fonts", "THSarabunNew Bold.ttf") // ✅ ใช้ขีดกลาง
    );

    // ✅ โลโก้มุมซ้ายบน
    const logoPath = path.join(__dirname, "assets", "pct.png");
    const logoSize = 70;
    doc.image(logoPath, 30, 30, { width: logoSize });

    // ✅ หัวกระดาษ
    doc
      .font("THSarabunNewBold")
      .fontSize(26)
      .text("บริษัท พี.ซี.ปิโตรเลียมแอนด์เทอร์มินอล จำกัด", 50, 25, {
        align: "center",
      });
    doc.moveDown(0.1);

    doc
      .font("THSarabunNew")
      .fontSize(22)
      .text("แผนการปฏิบัติงานแผนกเทกอง / เครื่องมือหนัก", { align: "center" });
    doc.moveDown(0.2);

    // ✅ กล่อง Revision
    doc.save();
    let revisionText = "-";
    if (reports[0]?.opre_show) {
      const parts = reports[0].opre_show.split("/");
      const code = parts[0] || "";
      const rev = parts[1] || "";
      const eff = parts[2] || "";

      revisionText =
        `${code}\n` + `Revision : ${rev}\n` + `Effective Date : ${eff}`;
    }

    const boxWidth = 140;
    const boxHeight = 65;
    const boxX = doc.page.width - boxWidth - 40;
    const boxY = 30;

    doc.rect(boxX, boxY, boxWidth, boxHeight).stroke();
    doc.font("THSarabunNewBold").fontSize(14);
    const textHeight = doc.heightOfString(revisionText, {
      width: boxWidth - 10,
    });
    const textY = boxY + (boxHeight - textHeight) / 2;

    doc.text(revisionText, boxX + 5, textY, {
      width: boxWidth - 10,
      align: "center",
    });
    doc.restore();

    // ✅ วันที่
    const reportDate = new Date(reports[0].op_date);
    const thaiMonths = [
      "มกราคม",
      "กุมภาพันธ์",
      "มีนาคม",
      "เมษายน",
      "พฤษภาคม",
      "มิถุนายน",
      "กรกฎาคม",
      "สิงหาคม",
      "กันยายน",
      "ตุลาคม",
      "พฤศจิกายน",
      "ธันวาคม",
    ];
    const formattedDate = `${reportDate.getDate()} ${thaiMonths[reportDate.getMonth()]} ${reportDate.getFullYear() + 543}`;

    const centerWidth = 300;
    const centerX = (doc.page.width - centerWidth) / 2;

    doc
      .font("THSarabunNew")
      .fontSize(16)
      .text(`วันที่ ${formattedDate}`, centerX, 100, {
        width: centerWidth,
        align: "center",
      });

    doc.moveDown(1);

    // ✅ ตาราง
    const headers = [
      "ลำดับ",
      "วันที่",
      "เครื่องจักร",
      "พนักงาน",
      "งาน",
      "เริ่มต้น",
      "สิ้นสุด",
      "เวลาทำงาน",
    ];
    const columnWidths = [40, 65, 60, 150, 200, 100, 100, 60];
    let startX = 30;
    let startY = doc.y + 10;

    // header
    headers.forEach((h, i) => {
      doc.rect(startX, startY, columnWidths[i], 25).stroke();
      doc.fontSize(16).text(h, startX + 5, startY + 6, {
        width: columnWidths[i] - 10,
        align: "center",
      });
      startX += columnWidths[i];
    });

    const rowHeight = 25;
    let rowY = startY + 25; // ✅ ประกาศตรงนี้ให้ชัดเจน

    // ถ้ามีหลาย row เกินหน้าเดียว ตอนนี้เราจะไม่บีบอัตโนมัติแล้ว
    // (แต่ถ้าอยากบังคับหน้าเดียว ให้ใช้ slice() จำกัดจำนวนแถว)
    reports.slice(0, 20).forEach((r, idx) => {
      startX = 30;
      const row = [
        idx + 1,
        formatDateUTC(r.op_date),
        r.machine || "",
        r.operator || "",
        r.job || "",
        formatDateTimeUTC(r.start_time),
        formatDateTimeUTC(r.stop_time),
        formatHourMinute(r.op_hour),
      ];

      row.forEach((cell, i) => {
        doc.rect(startX, rowY, columnWidths[i], rowHeight).stroke();
        // ✅ แก้ขนาดข้อความเป็น 16
        doc.fontSize(16).text(cell.toString(), startX + 3, rowY + 5, {
          width: columnWidths[i] - 6,
          align: "center",
        });
        startX += columnWidths[i];
      });

      rowY += rowHeight;
    });

    // ================== ส่วนท้าย PDF ==================
    let posY = rowY + 40;
    const roles = [
      "ผู้ควบคุมงานฝ่ายเทกอง",
      "ผู้ช่วยผู้จัดการท่าเรือ",
      "ผู้จัดการท่าเรือ",
    ];

    const sigBoxWidth = 200;
    const gap = 40;
    const totalWidth = sigBoxWidth * roles.length + gap * (roles.length - 1);
    const footerStartX = (doc.page.width - totalWidth) / 2;

    roles.forEach((role, i) => {
      const posX = footerStartX + i * (sigBoxWidth + gap);

      doc
        .font("THSarabunNew")
        .fontSize(16)
        .text(role, posX, posY, { width: sigBoxWidth, align: "center" });

      const lineY = posY + 50;
      doc
        .moveTo(posX + 20, lineY)
        .lineTo(posX + sigBoxWidth - 20, lineY)
        .stroke();

      doc
        .font("THSarabunNew")
        .fontSize(14)
        .text("(ลงชื่อ)", posX, lineY + 5, {
          width: sigBoxWidth,
          align: "center",
        });

      doc
        .font("THSarabunNew")
        .fontSize(14)
        .text("วันที่ ____________________", posX, lineY + 25, {
          width: sigBoxWidth,
          align: "center",
        });

      // ✅ ข้อความ "จัดเก็บแฟ้ม 2 ปี" ใต้วันที่ของตำแหน่งขวาสุด
      if (i === roles.length - 1) {
        doc
          .font("THSarabunNew")
          .fontSize(14)
          .text("จัดเก็บแฟ้ม 2 ปี", posX, lineY + 60, {
            width: sigBoxWidth,
            align: "center",
          });
      }
    });
    // ================== ปิดเอกสาร ==================
    doc.end();

    return { success: true, message: "Export PDF สำเร็จ", path: exportPath };
  } catch (err) {
    console.error("export-pdf error:", err);
    return { success: false, error: err.message };
  }
});

<!doctype html>
<html lang="th">
  <head>
    <meta charset="UTF-8" />
    <title>Daily Report</title>
    <style>
      table {
        border-collapse: collapse;
        width: 100%;
      }
      table,
      th,
      td {
        border: 1px solid black;
      }
      th,
      td {
        text-align: center;
        vertical-align: middle;
        padding: 5px;
      }
      #exportBtn {
        margin-left: 10px;
      }
    </style>
  </head>
  <body>
    <nav style="background: #333; color: #fff; padding: 10px">
      <span style="font-weight: bold">📑 ISO Control</span>
      <button
        id="menuInsertOpreBtn"
        style="
          float: right;
          background: #4caf50;
          color: white;
          border: none;
          padding: 5px 15px;
          cursor: pointer;
        "
      >
        ➕ Insert ISO Code
      </button>
    </nav>

    <!-- Modal ฟอร์ม Insert OPRE -->
    <div
      id="opreModal"
      style="
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        text-align: center;
        padding-top: 100px;
      "
    >
      <div
        style="
          background: #fff;
          display: inline-block;
          padding: 20px;
          border-radius: 8px;
          min-width: 320px;
        "
      >
        <h3>เพิ่มข้อมูล ISO Code</h3>

        <label>ISO Code:</label><br />
        <input type="text" id="opre_code" /><br /><br />

        <label>Revision:</label><br />
        <input type="text" id="opre_rev" /><br /><br />

        <label>Effective Date:</label><br />
        <input type="date" id="opre_eff" /><br /><br />

        <button id="saveOpreBtn">บันทึก</button>
        <button id="cancelOpreBtn">ยกเลิก</button>
      </div>
    </div>

    <h2>บันทึกรายงานประจำวัน ฝ่ายปฎิบัติการเทกอง</h2>
    <p id="welcome"></p>

    <div
      style="
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 600px;
      "
    >
      <div>
        <label>ID:</label>
        <input type="text" id="op_id" disabled />
      </div>
      <div>
        <label>Revision:</label>
        <select id="opre_select" style="min-width: 200px"></select>
      </div>
    </div>
    <br /><br />
    <label>วันที่:</label>
    <input type="date" id="op_date" /><br /><br />

    <label>เครื่องจักร:</label>
    <select id="machine"></select
    ><br /><br />

    <label>พนักงาน:</label>
    <select id="operator"></select
    ><br /><br />

    <label>งาน:</label>
    <input type="text" id="job" placeholder="กรอกงานที่ทำ..." /><br /><br />

    <label>เริ่มต้น:</label>
    <input type="datetime-local" id="start_time" /><br /><br />

    <label>สิ้นสุด:</label>
    <input type="datetime-local" id="stop_time" /><br /><br />

    <button id="submit">บันทึก</button>
    <button id="clearBtn">เคลียร์</button>
    <button id="exportBtn">Export to Excel</button>
    <button id="exportPdfBtn">Export to PDF</button>

    <p
      id="status"
      style="color: green; font-weight: bold; margin-top: 10px"
    ></p>

    <h3 id="reportTitle">รายงานทั้งหมด</h3>
    <table id="reportTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>วันที่</th>
          <th>เครื่องจักร</th>
          <th>พนักงาน</th>
          <th>งาน</th>
          <th>เริ่มต้น</th>
          <th>สิ้นสุด</th>
          <th>เวลาทำงาน</th>
          <th>บันทึก/อัพเดท</th>
          <th>ผู้บันทึก</th>
          <th>Revision</th>
          <th>
            <button id="deleteBtn" onclick="deleteSelected()">
              ลบที่เลือก
            </button>
            <br />
            <input type="checkbox" id="checkAll" /> เลือกทั้งหมด
          </th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <script>
      function formatThaiDate(dateStr) {
        if (!dateStr) return "";
        const d = new Date(dateStr);
        const thaiMonths = [
          "มกราคม",
          "กุมภาพันธ์",
          "มีนาคม",
          "เมษายน",
          "พฤษภาคม",
          "มิถุนายน",
          "กรกฎาคม",
          "สิงหาคม",
          "กันยายน",
          "ตุลาคม",
          "พฤศจิกายน",
          "ธันวาคม",
        ];
        const day = d.getDate();
        const month = thaiMonths[d.getMonth()];
        const year = d.getFullYear() + 543; // แปลงเป็น พ.ศ.
        return `${day} ${month} ${year}`;
      }

      function updateReportTitle() {
        const selectedDate = document.getElementById("op_date").value;
        const title = selectedDate
          ? `รายงานประจำวันที่ ${formatThaiDate(selectedDate)}`
          : "รายงานทั้งหมด";
        document.getElementById("reportTitle").textContent = title;
      }

      function formatDate(dateValue) {
        if (!dateValue) return "";
        if (dateValue instanceof Date) {
          const yyyy = dateValue.getUTCFullYear();
          const mm = String(dateValue.getUTCMonth() + 1).padStart(2, "0");
          const dd = String(dateValue.getUTCDate()).padStart(2, "0");
          return `${yyyy}-${mm}-${dd}`;
        }
        return dateValue.toString().slice(0, 10);
      }

      function formatDateTime(dateValue) {
        if (!dateValue) return "";
        if (dateValue instanceof Date) {
          const yyyy = dateValue.getUTCFullYear();
          const mm = String(dateValue.getUTCMonth() + 1).padStart(2, "0");
          const dd = String(dateValue.getUTCDate()).padStart(2, "0");
          const hh = String(dateValue.getUTCHours()).padStart(2, "0");
          const min = String(dateValue.getUTCMinutes()).padStart(2, "0");
          return `${yyyy}-${mm}-${dd} ${hh}:${min}`;
        }
        return dateValue.toString().replace("T", " ").slice(0, 16);
      }

      function formatHourMinute(totalMinutes) {
        if (totalMinutes == null) return "";
        const hours = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        return `${hours.toString().padStart(2, "0")}:${minutes
          .toString()
          .padStart(2, "0")}`;
      }

      function getDefaultDateTime(hour, minute) {
        const now = new Date();
        now.setHours(hour, minute, 0, 0);
        return now.toISOString().slice(0, 16);
      }

      // ✅ clear form (reset ค่า default)
      function clearForm() {
        const today = document.getElementById("op_date").value;
        document.getElementById("op_id").value = "";
        document.getElementById("machine").value = "";
        document.getElementById("operator").value = "";
        document.getElementById("job").value = "";
        document.getElementById("start_time").value = `${today}T08:00`;
        document.getElementById("stop_time").value = `${today}T17:00`;
        document.getElementById("submit").textContent = "บันทึก";
      }

      // ======================= Load Lists =======================
      async function loadLists() {
        const lists = await window.api.getLists();
        const machineSelect = document.getElementById("machine");
        const operatorSelect = document.getElementById("operator");

        machineSelect.innerHTML = `<option value="">-- เลือกเครื่องจักร --</option>`;
        operatorSelect.innerHTML = `<option value="">-- เลือกพนักงาน --</option>`;

        if (lists.machines) {
          // ✅ เรียงลำดับก่อน
          lists.machines
            .sort((a, b) => a.localeCompare(b, "th")) // th → เรียงแบบภาษาไทยด้วย
            .forEach(
              (m) =>
                (machineSelect.innerHTML += `<option value="${m}">${m}</option>`)
            );
        }

        if (lists.operators) {
          // ✅ เรียงลำดับก่อน
          lists.operators
            .sort((a, b) => a.localeCompare(b, "th"))
            .forEach(
              (o) =>
                (operatorSelect.innerHTML += `<option value="${o}">${o}</option>`)
            );
        }
      }

      // ======================= Load OPRE List =======================

      async function loadOpreList() {
        const list = await window.opre.getList();
        const select = document.getElementById("opre_select");
        select.innerHTML = `<option value="">-- เลือก Revision --</option>`;

        if (list && !list.error) {
          list.forEach((item) => {
            // ✅ แสดง opre_show
            select.innerHTML += `<option value="${item.opre_id}">${item.opre_show}</option>`;
          });
        }
      }

      // ======================= Load Reports =======================
      async function loadReports() {
        const selectedDate = document.getElementById("op_date").value;
        const reports = await window.api.getReports(selectedDate);
        const tbody = document.querySelector("#reportTable tbody");
        tbody.innerHTML = "";

        if (reports && !reports.error) {
          reports.forEach((r) => {
            const tr = document.createElement("tr");
            tr.innerHTML = `
                    <td>${r.op_id}</td>
                    <td>${formatDate(r.op_date)}</td>
                    <td>${r.machine || ""}</td>
                    <td>${r.operator || ""}</td>
                    <td>${r.job || ""}</td>
                    <td>${formatDateTime(r.start_time)}</td>
                    <td>${formatDateTime(r.stop_time)}</td>
                    <td>${formatHourMinute(r.op_hour)}</td>
                    <td>${formatDateTime(r.time_stamp)}</td>
                    <td>${r.recorder_name || ""}</td>
                     <td>${r.opre_show || ""}</td>
                    <td><input type="checkbox" class="rowCheck" value="${r.op_id}"></td>
                  `;
            tr.addEventListener("click", () => {
              document.getElementById("op_id").value = r.op_id;
              document.getElementById("op_date").value = formatDate(r.op_date);
              document.getElementById("machine").value = r.machine || "";
              document.getElementById("operator").value = r.operator || "";
              document.getElementById("job").value = r.job || "";
              if (r.start_time)
                document.getElementById("start_time").value = new Date(
                  r.start_time
                )
                  .toISOString()
                  .slice(0, 16);
              if (r.stop_time)
                document.getElementById("stop_time").value = new Date(
                  r.stop_time
                )
                  .toISOString()
                  .slice(0, 16);

              if (r.opre_rev) {
                const select = document.getElementById("opre_select");
                // วนหา option ที่ตรงกับค่า opre_rev แล้วเลือกมัน
                for (let option of select.options) {
                  if (
                    option.text === r.opre_show ||
                    option.text.includes(r.opre_rev)
                  ) {
                    select.value = option.value;
                    break;
                  }
                }
              }

              document.getElementById("submit").textContent = "อัพเดท";
            });
            tbody.appendChild(tr);
          });
        }

        document
          .getElementById("checkAll")
          .addEventListener("change", function () {
            document
              .querySelectorAll(".rowCheck")
              .forEach((cb) => (cb.checked = this.checked));
          });
      }

      // ======================= Delete =======================
      async function deleteSelected() {
        const checked = Array.from(
          document.querySelectorAll(".rowCheck:checked")
        ).map((cb) => parseInt(cb.value));
        if (checked.length === 0) {
          alert("กรุณาเลือกข้อมูลที่จะลบ");
          return;
        }
        if (checked.length === 0) {
          document.getElementById("status").textContent =
            "⚠️ กรุณาเลือกข้อมูลที่จะลบ";
          return;
        }

        const res = await window.api.deleteMultiple(checked);
        document.getElementById("status").textContent =
          res.message || res.error;
        await loadReports();
        loadOpreList();
        clearForm();
      }

      // ======================= Export =======================
      async function exportExcel() {
        const selectedDate = document.getElementById("op_date").value;
        const res = await window.api.exportExcel(selectedDate);
        if (res.success) alert("✅ " + res.message + "\nไฟล์: " + res.path);
        else alert("❌ Export ล้มเหลว: " + res.error);
      }

      async function exportPDF() {
        const selectedDate = document.getElementById("op_date").value;
        const res = await window.api.exportPDF(selectedDate);
        if (res.success) alert("✅ " + res.message + "\nไฟล์: " + res.path);
        else alert("❌ Export PDF ล้มเหลว: " + res.error);
      }

      // ======================= Init =======================
      window.addEventListener("DOMContentLoaded", () => {
        document.getElementById("op_date").value = new Date()
          .toISOString()
          .split("T")[0];
        updateReportTitle();
        document.getElementById("start_time").value = getDefaultDateTime(8, 0);
        document.getElementById("stop_time").value = getDefaultDateTime(17, 0);

        document;
        const username = localStorage.getItem("username") || "ไม่ทราบชื่อ";
        document.getElementById("welcome").textContent =
          "👋 สวัสดีคุณ " + username;

        document
          .getElementById("submit")
          .addEventListener("click", async () => {
            const data = {
              op_id: document.getElementById("op_id").value || null,
              op_date: document.getElementById("op_date").value,
              machine: document.getElementById("machine").value,
              operator: document.getElementById("operator").value,
              job: document.getElementById("job").value,
              start_time: document.getElementById("start_time").value,
              stop_time: document.getElementById("stop_time").value,
              recorder_name: localStorage.getItem("username") || "ไม่ระบุ",
              opre_id: document.getElementById("opre_select").value || null, // ✅ เพิ่มตรงนี้
            };

            let res;
            if (data.op_id) res = await window.api.updateReport(data);
            else res = await window.api.saveReport(data);

            document.getElementById("status").textContent =
              res.message || res.error;

            await loadReports();
            loadOpreList();
            clearForm();
          });

        document.getElementById("op_date").addEventListener("change", () => {
          updateReportTitle();
          clearForm();
          loadReports();
          loadOpreList();
        });

        document
          .getElementById("clearBtn")
          .addEventListener("click", () => clearForm());

        document
          .getElementById("exportBtn")
          .addEventListener("click", exportExcel);
        document
          .getElementById("exportPdfBtn")
          .addEventListener("click", exportPDF);

        loadLists();
        loadReports();
        loadOpreList();
      });

      // ======================= OPRE Modal =======================
      document
        .getElementById("menuInsertOpreBtn")
        .addEventListener("click", () => {
          document.getElementById("opreModal").style.display = "block";
        });

      document.getElementById("cancelOpreBtn").addEventListener("click", () => {
        document.getElementById("opreModal").style.display = "none";
      });

      document
        .getElementById("saveOpreBtn")
        .addEventListener("click", async () => {
          const opre_code = document.getElementById("opre_code").value.trim();
          const opre_rev = document.getElementById("opre_rev").value.trim();
          const opre_eff = document.getElementById("opre_eff").value;

          if (!opre_code || !opre_rev || !opre_eff) {
            alert("⚠️ กรุณากรอกข้อมูลให้ครบ");
            return;
          }

          const res = await window.opre.insert({
            opre_code,
            opre_rev,
            opre_eff,
          });

          if (res.success) {
            alert("✅ " + res.message);
            // reset
            document.getElementById("opre_code").value = "";
            document.getElementById("opre_rev").value = "";
            document.getElementById("opre_eff").value = "";
            document.getElementById("opreModal").style.display = "none";
          } else {
            alert("❌ " + (res.error || "Insert ล้มเหลว"));
          }
        });

      window.addEventListener("login-success", (e) => {
        const user = e.detail;
        document.getElementById("welcome").textContent =
          "👋 สวัสดีคุณ " + user.username;
      });
    </script>
  </body>
</html>


<!doctype html>
<html lang="th">
  <head>
    <meta charset="UTF-8" />
    <title>Login</title>
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'; style-src 'self'"
    />
    <link rel="stylesheet" href="login.css" />
  </head>
  <body>
    <h2>เข้าสู่ระบบ</h2>
    <input type="text" id="login_user" placeholder="ชื่อผู้ใช้" />
    <input type="password" id="login_password" placeholder="รหัสผ่าน" />
    <button id="loginBtn">Login</button>

    <hr />
    <h3>เพิ่มผู้ใช้งานใหม่</h3>
    <input type="text" id="new_user" placeholder="ชื่อผู้ใช้ใหม่" />
    <input type="password" id="new_pass" placeholder="รหัสผ่านใหม่" />
    <input type="text" id="new_name" placeholder="ชื่อจริงของผู้ใช้" />
    <input type="password" id="secret" placeholder="รหัสลับยืนยัน" />
    <button id="addUserBtn">เพิ่มผู้ใช้งาน</button>
    <p
      id="status"
      style="color: green; font-weight: bold; margin-top: 10px"
    ></p>
    <script src="login.js"></script>
  </body>
</html>

window.addEventListener("DOMContentLoaded", () => {
  const loginBtn = document.getElementById("loginBtn");
  const addUserBtn = document.getElementById("addUserBtn");

  loginBtn.addEventListener("click", async () => {
    const user = document.getElementById("login_user").value;
    const pass = document.getElementById("login_password").value;

    if (!user || !pass) {
      document.getElementById("status").textContent =
        "⚠️ กรุณากรอกชื่อผู้ใช้และรหัสผ่าน";
      return;
    }

    const res = await window.auth.login({ user, pass });

    if (res.success) {
      localStorage.setItem("login_user", res.login_user);
      localStorage.setItem("username", res.username);
      window.location = "index.html";
    } else {
      document.getElementById("status").textContent =
        "❌ " + (res.message || res.error);
    }
  });

  addUserBtn.addEventListener("click", async () => {
    const new_user = document.getElementById("new_user").value;
    const new_pass = document.getElementById("new_pass").value;
    const new_name = document.getElementById("new_name").value;
    const secret = document.getElementById("secret").value;

    if (!new_user || !new_pass || !new_name || !secret) {
      document.getElementById("status").textContent =
        "⚠️ กรุณากรอกข้อมูลให้ครบ";
      document.getElementById("status").style.color = "red";
      return;
    }

    const res = await window.auth.addUser({
      login_user: new_user,
      login_password: new_pass,
      username: new_name,
      secret,
    });

    document.getElementById("status").textContent = res.message || res.error;
    document.getElementById("status").style.color = res.success
      ? "green"
      : "red";

    if (res.success) {
      document.getElementById("new_user").value = "";
      document.getElementById("new_pass").value = "";
      document.getElementById("new_name").value = "";
      document.getElementById("secret").value = "";
    }
  });
});

// v2.7 preload setup
const { contextBridge, ipcRenderer } = require("electron");

contextBridge.exposeInMainWorld("api", {
  getLists: () => ipcRenderer.invoke("get-lists"),
  saveReport: (data) => ipcRenderer.invoke("insert-report", data),
  updateReport: (data) => ipcRenderer.invoke("update-report", data),
  getReports: (date) => ipcRenderer.invoke("get-reports", date),
  deleteReport: (id) => ipcRenderer.invoke("delete-report", id),
  deleteMultiple: (ids) => ipcRenderer.invoke("delete-multiple", ids),
  exportExcel: (date) => ipcRenderer.invoke("export-excel", date),
  exportPDF: (date) => ipcRenderer.invoke("export-pdf", date), // ✅ เพิ่ม PDF
});

contextBridge.exposeInMainWorld("auth", {
  login: (data) => ipcRenderer.invoke("login-check", data),
  addUser: (data) => ipcRenderer.invoke("add-user", data),
});

contextBridge.exposeInMainWorld("opre", {
  insert: (data) => ipcRenderer.invoke("insert-opre", data),
  getCodes: () => ipcRenderer.invoke("get-opre-codes"),
  getList: () => ipcRenderer.invoke("get-opre-list"),
});

contextBridge.exposeInMainWorld("excel", {
  exportTable: (reports, filename) => {
    // ✅ ใช้ formatDate / formatDateTime
    const data = reports.map((r) => ({
      ลำดับ: r.op_id,
      วันที่: formatDate(r.op_date),
      เครื่องจักร: r.machine,
      พนักงาน: r.operator,
      งาน: r.job,
      เริ่มต้น: formatDateTime(r.start_time),
      สิ้นสุด: formatDateTime(r.stop_time),
      เวลาทำงาน: formatHourMinute(r.op_hour),
    }));

    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Reports");
    XLSX.writeFile(wb, filename || "daily_report.xlsx");
  },
});
